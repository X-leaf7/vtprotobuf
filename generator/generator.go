package generator

import (
	"runtime/debug"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

type helper struct {
	path   protogen.GoImportPath
	plugin int
}

type Extensions struct {
	Poolable map[protogen.GoIdent]bool
}

type Generator struct {
	seen  map[helper]bool
	ext   *Extensions
	plugs []PluginFactory
}

func NewGenerator(features []string, ext *Extensions) (*Generator, error) {
	plugs, err := findPlugins(features)
	if err != nil {
		return nil, err
	}

	return &Generator{
		seen:  make(map[helper]bool),
		ext:   ext,
		plugs: plugs,
	}, nil
}

func (gen *Generator) GenerateFile(gf *protogen.GeneratedFile, file *protogen.File) bool {
	if file.Desc.Syntax() != protoreflect.Proto3 {
		return false
	}

	p := &GeneratedFile{
		GeneratedFile: gf,
		Ext:           gen.ext,
	}

	p.P("// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.")
	if bi, ok := debug.ReadBuildInfo(); ok {
		p.P("// protoc-gen-go-vtproto version: ", bi.Main.Version)
	}
	p.P("// source: ", file.Desc.Path())
	p.P()
	p.P("package ", file.GoPackageName)
	p.P()

	protoimplPackage := protogen.GoImportPath("google.golang.org/protobuf/runtime/protoimpl")
	p.P("const (")
	p.P("// Verify that this generated code is sufficiently up-to-date.")
	p.P("_ = ", protoimplPackage.Ident("EnforceVersion"), "(", protoimpl.GenVersion, " - ", protoimplPackage.Ident("MinVersion"), ")")
	p.P("// Verify that runtime/protoimpl is sufficiently up-to-date.")
	p.P("_ = ", protoimplPackage.Ident("EnforceVersion"), "(", protoimplPackage.Ident("MaxVersion"), " - ", protoimpl.GenVersion, ")")
	p.P(")")
	p.P()

	var generated bool
	for pidx, pfactory := range gen.plugs {
		plugin := pfactory(p)
		if plugin.GenerateFile(file) {
			generated = true

			helpersForPlugin := helper{
				path:   file.GoImportPath,
				plugin: pidx,
			}
			if !gen.seen[helpersForPlugin] {
				plugin.GenerateHelpers()
				gen.seen[helpersForPlugin] = true
			}
		}
	}

	return generated
}
