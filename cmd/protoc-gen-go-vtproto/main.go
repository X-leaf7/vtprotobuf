package main

import (
	"flag"
	"fmt"
	"runtime/debug"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

type ObjectSet map[protogen.GoIdent]bool

func (o ObjectSet) String() string {
	return fmt.Sprintf("%#v", o)
}

func (o ObjectSet) Set(s string) error {
	idx := strings.LastIndexByte(s, '.')
	if idx < 0 {
		return fmt.Errorf("invalid object name: %q", s)
	}

	ident := protogen.GoIdent{
		GoImportPath: protogen.GoImportPath(s[0:idx]),
		GoName:       s[idx+1:],
	}
	o[ident] = true
	return nil
}

func main() {
	poolable := make(ObjectSet)
	var f flag.FlagSet
	f.Var(poolable, "P", "use memory pooling for this object")
	protogen.Options{ParamFunc: f.Set}.Run(func(plugin *protogen.Plugin) error {
		generateAllFiles(plugin, poolable)
		return nil
	})
}

func generateAllFiles(plugin *protogen.Plugin, poolable ObjectSet) {
	seen := make(map[protogen.GoImportPath]bool)
	for _, file := range plugin.Files {
		if !file.Generate {
			continue
		}

		gf := plugin.NewGeneratedFile(file.GeneratedFilenamePrefix+"_vtproto.pb.go", file.GoImportPath)
		pf := &vtprotofile{GeneratedFile: gf, stable: false, mempool: poolable}
		if !pf.Generate(file, seen) {
			gf.Skip()
		}
	}
}

type vtprotofile struct {
	*protogen.GeneratedFile
	atleastOne bool
	stable     bool
	mempool    ObjectSet
}

func (p *vtprotofile) generateMessage(message *protogen.Message) {
	for _, nested := range message.Messages {
		p.generateMessage(nested)
	}
	if message.Desc.IsMapEntry() {
		return
	}
	p.atleastOne = true
	p.MessageUnmarshal(message, true)
	p.MarshalMessage(message)
	p.SizeMessage(message)
	p.PoolMessage(message)
}

func (p *vtprotofile) Generate(file *protogen.File, seen map[protogen.GoImportPath]bool) bool {
	if file.Desc.Syntax() != protoreflect.Proto3 {
		return false
	}

	p.atleastOne = false
	p.P("// Code generated by protoc-gen-go-vtproto. DO NOT EDIT.")
	if bi, ok := debug.ReadBuildInfo(); ok {
		p.P("// protoc-gen-go-vtproto version: ", bi.Main.Version)
	}
	p.P("// source: ", file.Desc.Path())
	p.P()
	p.P("package ", file.GoPackageName)
	p.P()

	for _, message := range file.Messages {
		p.generateMessage(message)
	}
	if !p.atleastOne {
		return false
	}

	if !seen[file.GoImportPath] {
		seen[file.GoImportPath] = true
		p.UnmarshalHelpers()
		p.MarshalHelpers()
		p.SizeHelpers()

		p.P(`
	type vtprotoMessage interface {
		MarshalToVT([]byte) (int, error)
		SizeVT() int
	}`)
	}

	return true
}
